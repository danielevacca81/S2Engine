// Uniform.h
// 
#ifndef UNIFORM_ONCE
#define UNIFORM_ONCE

#include "S2RendererAPI.h"

#include "Math/Math.h"

#include <string>

namespace OpenGL {

// ------------------------------------------------------------------------------------------------
// ------------------------------------------------------------------------------------------------
// ------------------------------------------------------------------------------------------------
class S2RENDERER_API Uniform
{
protected:
	std::string  _name;
	int          _location;

	Uniform( int location, const std::string  &name )
	: _name(name)
	, _location(location)
	{}

public:
	virtual ~Uniform()	{}

	int         location()    const { return _location; }
	std::string name()        const { return _name;     }

	virtual void set() = 0;
};
// ------------------------------------------------------------------------------------------------
// ------------------------------------------------------------------------------------------------
// ------------------------------------------------------------------------------------------------


// ------------------------------------------------------------------------------------------------
// ------------------------------------------------------------------------------------------------
// ------------------------------------------------------------------------------------------------
template<typename T>
class UniformValue : public Uniform
{
protected:
	T            _value;

	UniformValue( int location, const std::string  &name )
	: Uniform( location,name )
	, _value()
	{}

	virtual ~UniformValue()
	{}

public:
	inline T    value()                 const { return _value; }
	inline void setValue( const T &val )      { _value = val;  }
};
// ------------------------------------------------------------------------------------------------
// ------------------------------------------------------------------------------------------------
// ------------------------------------------------------------------------------------------------




}
#endif